<?php declare(strict_types=1);
// UTF-8 marker äöüÄÖÜß€
// start new session

session_start();
/**
 * Class PageTemplate for the exercises of the EWA lecture
 * Demonstrates use of PHP including class and OO.
 * Implements Zend coding standards.
 * Generate documentation with Doxygen or phpdoc
 *
 * PHP Version 7.4
 *
 * @file     PageTemplate.php
 * @package  Page Templates
 * @author   Bernhard Kreling, <bernhard.kreling@h-da.de>
 * @author   Ralf Hahn, <ralf.hahn@h-da.de>
 * @version  3.0
 */

// to do: change name 'PageTemplate' throughout this file
require_once './base/Page.php';

/**
 * This is a template for top level classes, which represent
 * a complete web page and which are called directly by the user.
 * Usually there will only be a single instance of such a class.
 * The name of the template is supposed
 * to be replaced by the name of the specific HTML page e.g. baker.
 * The order of methods might correspond to the order of thinking
 * during implementation.
 * @author   Bernhard Kreling, <bernhard.kreling@h-da.de>
 * @author   Ralf Hahn, <ralf.hahn@h-da.de>
 */
class order extends Page
{
    // to do: declare reference variables for members
    // representing substructures/blocks

    /**
     * Instantiates members (to be defined above).
     * Calls the constructor of the parent i.e. page class.
     * So, the database connection is established.
     * @throws Exception
     */
    protected function __construct()
    {
        parent::__construct();
        // to do: instantiate members representing substructures/blocks
    }

    /**
     * Cleans up whatever is needed.
     * Calls the destructor of the parent i.e. page class.
     * So, the database connection is closed.
     */
    public function __destruct()
    {
        parent::__destruct();
    }
    /**
     * generate page header
     * @return void
     */
    protected function generatePageHeader(string $title = ''): void
    {
        parent::generatePageHeader($title); // TODO: Change the autogenerated stub

    }
    /**
     * Fetch all data that is necessary for later output.
     * Data is returned in an array e.g. as associative array.
     * @return array An array containing the requested data.
     * This may be a normal array, an empty array or an associative array.
     */
    protected function getViewData():array
    {
        // to do: fetch data for this view from the database
        // to do: return array containing data
        error_reporting(E_ALL);
        $pizzas = array();
        $sqlQuery = "SELECT * FROM article";
        $recordset = $this->_database->query($sqlQuery);
        if(!$recordset)
            throw new Exception("Fehler in Abfrage: " . $this->_database->error);
        while ($record = $recordset->fetch_assoc()) {
            $id = $record["article_id"];
            $name = $record["name"];
            $price = $record["price"];
            $picture = $record["picture"];
            //array for name, price, picture.
            $pizzaData = array($name, $price, $picture, $id);
            $pizzas[$id] = $pizzaData;
        }
        $recordset->free();
        return $pizzas;
    }

    /**
     * First the required data is fetched and then the HTML is
     * assembled for output. i.e. the header is generated, the content
     * of the page ("view") is inserted and -if available- the content of
     * all views contained is generated.
     * Finally, the footer is added.
     * @return void
     */

    protected function generateView():void
    {
        error_reporting(E_ALL);
        $data = $this->getViewData(); // NOSONAR ignore unused $data
        $this->generatePageHeader('Bestellung');
        // to do: output view of this page using $data
        echo <<<EOT

        <main>
            <h1 class="text-center">Bestelle deine Pizza</h1>
            <div class="row">
                <div class="col">
                    <h2>Speisekarte</h2>
        EOT;
        foreach ($data as $pizza){
            $this->printArticle($pizza[0], $pizza[1], $pizza[2], $pizza[3]);
        }
        //statuses hardcoded ,that is bad i will change it later
        echo <<<EOT
                </div>
                <div class="col-spacer"></div>
                <div class="col">
                <h2>Warenkorb <button class="btn red inline" type="reset" tabindex="2" onclick="deleteAllPizza()">Leeren</button></h2>
                <div id="cart">
                    <div id="empty-placeholder" class="text-muted text-center">Keine Artikel</div>
                </div>
                <hr />
                <i>Gesamt: <span id="total-price">0.00</span> €</i>

                <h2 class="m-top">Ihre Daten</h2>
                <form action="order.php" accept-charset="UTF-8" method="post">
                    <input name="name" class="input-large" type="text" placeholder="Name" required value="">
                    <input name="street" class="input-medium" type="text" placeholder="Straße" required value="">
                    <input name="houseno" class="input-small" type="text" placeholder="Nr" maxlength="5" required value="">
                    <input name="zipcode" class="input-small" type="text" placeholder="PLZ" maxlength="5" required value="">
                    <input name="city" class="input-medium" type="text" placeholder="Stadt" required value="">
                    <input name="cart" id="cart-data" type="hidden" value="[]">

                    <div class="text-center m-top">
                        <button class="btn blue" type="submit" tabindex="0" accesskey="s" id="btn-submit" disabled>Absenden</button>
                        <button class="btn red" type="reset" tabindex="1" accesskey="c">Löschen</button>
                    </div>
                </form>
                </div>
            </div>
        </main>

        <script src="scripts/order.js"></script>
        EOT;

        $this->generatePageFooter();
    }

    /**
     * @return void
     */
    public function printArticle($name, $price, $imgAddress, $id): void{
        echo <<<EOT
        <div class="pizza">
            <img alt="" src="$imgAddress" width="180">
            <div class="pizza-meta">
                <h2>Pizza $name</h2>
                <p>$price €</p>
            </div>
            <img alt="In den Warenkorb legen" class="pizza-button" src="img/icon-cart.svg" onclick="addToCart({name: '$name', price: $price, id: $id})">
        </div>

        EOT;
    }
    /**
     * Processes the data that comes via GET or POST.
     * If this page is supposed to do something with submitted
     * data do it here.
     * @return void
     */
    protected function processReceivedData():void
    {
        parent::processReceivedData();
        // to do: call processReceivedData() for all members
        if (isset($_POST['cart'])) {
            $name = $_POST['name'];
            $street = $_POST['street'];
            $houseno = $_POST['houseno'];
            $zipcode = $_POST['zipcode'];
            $city = $_POST['city'];
            $cart = json_decode($_POST['cart']);

            $address = $street.",".$houseno.",".$city.",".$zipcode.",".$name;
            // TODO: erst bestellung anlegen
            // escaped data
            $escapedAddress =  $this->_database ->real_escape_string($address);
            date_default_timezone_set('UTC');
            $now = new DateTime();
            $now->getTimestamp();
            $now = date_format($now, 'Y\-m\-d\ h:i:s');//format date
            $sqlQuery = "INSERT INTO ordering VALUES (NULL,'$escapedAddress','$now')";

            $recordset = $this->_database->query($sqlQuery);
            if (!$recordset) {
                throw new Exception("Query failed!" . $this->_database->error);
            }

            $ordering_id = $this->_database ->insert_id;
            $_SESSION["BestellungID"] = $ordering_id;
            foreach ($cart as $cart_item) {
                // TODO: items in die bestellung einfügen
                $sqlQuery = "INSERT INTO ordered_article VALUES (NULL,$ordering_id,$cart_item,0)";
                $recordset = $this->_database->query($sqlQuery);

                if (!$recordset) {
                    throw new Exception("Query failed!" . $this->_database->error);
                }
                $this->_database ->insert_id;
            }

            header("Location: customer.php?status=order_submitted");
            die();
        }
    }

    /**
     * This main-function has the only purpose to create an instance
     * of the class and to get all the things going.
     * I.e. the operations of the class are called to produce
     * the output of the HTML-file.
     * The name "main" is no keyword for php. It is just used to
     * indicate that function as the central starting point.
     * To make it simpler this is a static function. That is you can simply
     * call it without first creating an instance of the class.
     * @return void
     */
    public static function main():void
    {
        try {
            $page = new order();
            $page->processReceivedData();
            $page->generateView();
        } catch (Exception $e) {
            //header("Content-type: text/plain; charset=UTF-8");
            header("Content-type: text/html; charset=UTF-8");
            echo $e->getMessage();
        }
    }
}

// This call is starting the creation of the page.
// That is input is processed and output is created.
order::main();

// Zend standard does not like closing php-tag!
// PHP doesn't require the closing tag (it is assumed when the file ends).
// Not specifying the closing ? >  helps to prevent accidents
// like additional whitespace which will cause session
// initialization to fail ("headers already sent").
?>
